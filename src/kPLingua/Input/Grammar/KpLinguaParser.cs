//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KpLingua.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class KpLinguaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, Identifier=21, RelationalOperator=22, Multiplicity=23, 
		Ws=24, Comment=25, LineComment=26;
	public const int
		RULE_kPsystem = 0, RULE_statement = 1, RULE_typeDefinition = 2, RULE_ruleSet = 3, 
		RULE_executionStrategy = 4, RULE_sequenceExecutionStrategy = 5, RULE_choiceExecutionStrategy = 6, 
		RULE_maxExecutionStrategy = 7, RULE_arbitraryExecutionStrategy = 8, RULE_rule = 9, 
		RULE_ruleRightHandSide = 10, RULE_ruleMultiset = 11, RULE_guard = 12, 
		RULE_andGuardExpression = 13, RULE_guardOperand = 14, RULE_emptyMultiset = 15, 
		RULE_multisetAtom = 16, RULE_nonEmptyMultiset = 17, RULE_typeReference = 18, 
		RULE_targetedMultiset = 19, RULE_linkCreation = 20, RULE_linkDestruction = 21, 
		RULE_dissolution = 22, RULE_division = 23, RULE_instance = 24, RULE_instantiation = 25, 
		RULE_link = 26, RULE_linkOperand = 27, RULE_linkWildcardOperand = 28;
	public static readonly string[] ruleNames = {
		"kPsystem", "statement", "typeDefinition", "ruleSet", "executionStrategy", 
		"sequenceExecutionStrategy", "choiceExecutionStrategy", "maxExecutionStrategy", 
		"arbitraryExecutionStrategy", "rule", "ruleRightHandSide", "ruleMultiset", 
		"guard", "andGuardExpression", "guardOperand", "emptyMultiset", "multisetAtom", 
		"nonEmptyMultiset", "typeReference", "targetedMultiset", "linkCreation", 
		"linkDestruction", "dissolution", "division", "instance", "instantiation", 
		"link", "linkOperand", "linkWildcardOperand"
	};

	private static readonly string[] _LiteralNames = {
		null, "'type'", "'{'", "'}'", "'choice'", "'max'", "'arbitrary'", "':'", 
		"'->'", "'.'", "','", "'|'", "'&'", "'('", "')'", "'-'", "'\\-'", "'#'", 
		"'['", "']'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Identifier", "RelationalOperator", 
		"Multiplicity", "Ws", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KpLingua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KpLinguaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		protected const int EOF = Eof;

		public KpLinguaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KpLinguaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class KPsystemContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KpLinguaParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public KPsystemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kPsystem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKPsystem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KPsystemContext kPsystem() {
		KPsystemContext _localctx = new KPsystemContext(Context, State);
		EnterRule(_localctx, 0, RULE_kPsystem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__19) | (1L << Identifier))) != 0)) {
				{
				{
				State = 58; statement();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public InstantiationContext instantiation() {
			return GetRuleContext<InstantiationContext>(0);
		}
		public LinkContext link() {
			return GetRuleContext<LinkContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; typeDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; instantiation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; link();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(KpLinguaParser.Identifier, 0); }
		public RuleSetContext ruleSet() {
			return GetRuleContext<RuleSetContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(T__0);
			State = 72; Match(Identifier);
			State = 73; Match(T__1);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__12) | (1L << Identifier) | (1L << RelationalOperator) | (1L << Multiplicity))) != 0)) {
				{
				State = 74; ruleSet();
				}
			}

			State = 77; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSetContext : ParserRuleContext {
		public ExecutionStrategyContext[] executionStrategy() {
			return GetRuleContexts<ExecutionStrategyContext>();
		}
		public ExecutionStrategyContext executionStrategy(int i) {
			return GetRuleContext<ExecutionStrategyContext>(i);
		}
		public RuleSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSet; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSetContext ruleSet() {
		RuleSetContext _localctx = new RuleSetContext(Context, State);
		EnterRule(_localctx, 6, RULE_ruleSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 79; executionStrategy();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__12) | (1L << Identifier) | (1L << RelationalOperator) | (1L << Multiplicity))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutionStrategyContext : ParserRuleContext {
		public SequenceExecutionStrategyContext sequenceExecutionStrategy() {
			return GetRuleContext<SequenceExecutionStrategyContext>(0);
		}
		public ChoiceExecutionStrategyContext choiceExecutionStrategy() {
			return GetRuleContext<ChoiceExecutionStrategyContext>(0);
		}
		public MaxExecutionStrategyContext maxExecutionStrategy() {
			return GetRuleContext<MaxExecutionStrategyContext>(0);
		}
		public ArbitraryExecutionStrategyContext arbitraryExecutionStrategy() {
			return GetRuleContext<ArbitraryExecutionStrategyContext>(0);
		}
		public ExecutionStrategyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executionStrategy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecutionStrategy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecutionStrategyContext executionStrategy() {
		ExecutionStrategyContext _localctx = new ExecutionStrategyContext(Context, State);
		EnterRule(_localctx, 8, RULE_executionStrategy);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case Identifier:
			case RelationalOperator:
			case Multiplicity:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; sequenceExecutionStrategy();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; choiceExecutionStrategy();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86; maxExecutionStrategy();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87; arbitraryExecutionStrategy();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceExecutionStrategyContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public SequenceExecutionStrategyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceExecutionStrategy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequenceExecutionStrategy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceExecutionStrategyContext sequenceExecutionStrategy() {
		SequenceExecutionStrategyContext _localctx = new SequenceExecutionStrategyContext(Context, State);
		EnterRule(_localctx, 10, RULE_sequenceExecutionStrategy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 90; rule();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceExecutionStrategyContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public ChoiceExecutionStrategyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choiceExecutionStrategy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoiceExecutionStrategy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceExecutionStrategyContext choiceExecutionStrategy() {
		ChoiceExecutionStrategyContext _localctx = new ChoiceExecutionStrategyContext(Context, State);
		EnterRule(_localctx, 12, RULE_choiceExecutionStrategy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(T__3);
			State = 96; Match(T__1);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << Identifier) | (1L << RelationalOperator) | (1L << Multiplicity))) != 0)) {
				{
				{
				State = 97; rule();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxExecutionStrategyContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public MaxExecutionStrategyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxExecutionStrategy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxExecutionStrategy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaxExecutionStrategyContext maxExecutionStrategy() {
		MaxExecutionStrategyContext _localctx = new MaxExecutionStrategyContext(Context, State);
		EnterRule(_localctx, 14, RULE_maxExecutionStrategy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(T__4);
			State = 106; Match(T__1);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << Identifier) | (1L << RelationalOperator) | (1L << Multiplicity))) != 0)) {
				{
				{
				State = 107; rule();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArbitraryExecutionStrategyContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public ArbitraryExecutionStrategyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arbitraryExecutionStrategy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArbitraryExecutionStrategy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArbitraryExecutionStrategyContext arbitraryExecutionStrategy() {
		ArbitraryExecutionStrategyContext _localctx = new ArbitraryExecutionStrategyContext(Context, State);
		EnterRule(_localctx, 16, RULE_arbitraryExecutionStrategy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__5);
			State = 116; Match(T__1);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << Identifier) | (1L << RelationalOperator) | (1L << Multiplicity))) != 0)) {
				{
				{
				State = 117; rule();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public NonEmptyMultisetContext nonEmptyMultiset() {
			return GetRuleContext<NonEmptyMultisetContext>(0);
		}
		public RuleRightHandSideContext ruleRightHandSide() {
			return GetRuleContext<RuleRightHandSideContext>(0);
		}
		public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 18, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 125; guard();
				State = 126; Match(T__6);
				}
				break;
			}
			State = 130; nonEmptyMultiset();
			State = 131; Match(T__7);
			State = 132; ruleRightHandSide();
			State = 133; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleRightHandSideContext : ParserRuleContext {
		public EmptyMultisetContext emptyMultiset() {
			return GetRuleContext<EmptyMultisetContext>(0);
		}
		public RuleMultisetContext[] ruleMultiset() {
			return GetRuleContexts<RuleMultisetContext>();
		}
		public RuleMultisetContext ruleMultiset(int i) {
			return GetRuleContext<RuleMultisetContext>(i);
		}
		public DivisionContext[] division() {
			return GetRuleContexts<DivisionContext>();
		}
		public DivisionContext division(int i) {
			return GetRuleContext<DivisionContext>(i);
		}
		public DissolutionContext dissolution() {
			return GetRuleContext<DissolutionContext>(0);
		}
		public LinkCreationContext linkCreation() {
			return GetRuleContext<LinkCreationContext>(0);
		}
		public LinkDestructionContext linkDestruction() {
			return GetRuleContext<LinkDestructionContext>(0);
		}
		public RuleRightHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleRightHandSide; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleRightHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleRightHandSideContext ruleRightHandSide() {
		RuleRightHandSideContext _localctx = new RuleRightHandSideContext(Context, State);
		EnterRule(_localctx, 20, RULE_ruleRightHandSide);
		int _la;
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; emptyMultiset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; ruleMultiset();
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__9) {
					{
					{
					State = 137; Match(T__9);
					State = 138; ruleMultiset();
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 144; division();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__17 );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149; dissolution();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 150; linkCreation();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 151; linkDestruction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleMultisetContext : ParserRuleContext {
		public NonEmptyMultisetContext nonEmptyMultiset() {
			return GetRuleContext<NonEmptyMultisetContext>(0);
		}
		public TargetedMultisetContext targetedMultiset() {
			return GetRuleContext<TargetedMultisetContext>(0);
		}
		public RuleMultisetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleMultiset; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleMultiset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleMultisetContext ruleMultiset() {
		RuleMultisetContext _localctx = new RuleMultisetContext(Context, State);
		EnterRule(_localctx, 22, RULE_ruleMultiset);
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; nonEmptyMultiset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; targetedMultiset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		public AndGuardExpressionContext[] andGuardExpression() {
			return GetRuleContexts<AndGuardExpressionContext>();
		}
		public AndGuardExpressionContext andGuardExpression(int i) {
			return GetRuleContext<AndGuardExpressionContext>(i);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 24, RULE_guard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; andGuardExpression();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10) {
				{
				{
				State = 159; Match(T__10);
				State = 160; andGuardExpression();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndGuardExpressionContext : ParserRuleContext {
		public GuardOperandContext[] guardOperand() {
			return GetRuleContexts<GuardOperandContext>();
		}
		public GuardOperandContext guardOperand(int i) {
			return GetRuleContext<GuardOperandContext>(i);
		}
		public AndGuardExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andGuardExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndGuardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndGuardExpressionContext andGuardExpression() {
		AndGuardExpressionContext _localctx = new AndGuardExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_andGuardExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; guardOperand();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 167; Match(T__11);
				State = 168; guardOperand();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardOperandContext : ParserRuleContext {
		public NonEmptyMultisetContext nonEmptyMultiset() {
			return GetRuleContext<NonEmptyMultisetContext>(0);
		}
		public ITerminalNode RelationalOperator() { return GetToken(KpLinguaParser.RelationalOperator, 0); }
		public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		public GuardOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuardOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardOperandContext guardOperand() {
		GuardOperandContext _localctx = new GuardOperandContext(Context, State);
		EnterRule(_localctx, 28, RULE_guardOperand);
		int _la;
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case RelationalOperator:
			case Multiplicity:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RelationalOperator) {
					{
					State = 174; Match(RelationalOperator);
					}
				}

				State = 177; nonEmptyMultiset();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; Match(T__12);
				State = 179; guard();
				State = 180; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyMultisetContext : ParserRuleContext {
		public EmptyMultisetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyMultiset; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyMultiset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyMultisetContext emptyMultiset() {
		EmptyMultisetContext _localctx = new EmptyMultisetContext(Context, State);
		EnterRule(_localctx, 30, RULE_emptyMultiset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(T__1);
			State = 185; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultisetAtomContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(KpLinguaParser.Identifier, 0); }
		public ITerminalNode Multiplicity() { return GetToken(KpLinguaParser.Multiplicity, 0); }
		public MultisetAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multisetAtom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultisetAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultisetAtomContext multisetAtom() {
		MultisetAtomContext _localctx = new MultisetAtomContext(Context, State);
		EnterRule(_localctx, 32, RULE_multisetAtom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiplicity) {
				{
				State = 187; Match(Multiplicity);
				}
			}

			State = 190; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonEmptyMultisetContext : ParserRuleContext {
		public MultisetAtomContext[] multisetAtom() {
			return GetRuleContexts<MultisetAtomContext>();
		}
		public MultisetAtomContext multisetAtom(int i) {
			return GetRuleContext<MultisetAtomContext>(i);
		}
		public NonEmptyMultisetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonEmptyMultiset; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonEmptyMultiset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonEmptyMultisetContext nonEmptyMultiset() {
		NonEmptyMultisetContext _localctx = new NonEmptyMultisetContext(Context, State);
		EnterRule(_localctx, 34, RULE_nonEmptyMultiset);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; multisetAtom();
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 193; Match(T__9);
					State = 194; multisetAtom();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(KpLinguaParser.Identifier, 0); }
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(T__12);
			State = 201; Match(Identifier);
			State = 202; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetedMultisetContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public MultisetAtomContext multisetAtom() {
			return GetRuleContext<MultisetAtomContext>(0);
		}
		public NonEmptyMultisetContext nonEmptyMultiset() {
			return GetRuleContext<NonEmptyMultisetContext>(0);
		}
		public TargetedMultisetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetedMultiset; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetedMultiset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetedMultisetContext targetedMultiset() {
		TargetedMultisetContext _localctx = new TargetedMultisetContext(Context, State);
		EnterRule(_localctx, 38, RULE_targetedMultiset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
			case Multiplicity:
				{
				State = 204; multisetAtom();
				}
				break;
			case T__1:
				{
				State = 205; Match(T__1);
				State = 206; nonEmptyMultiset();
				State = 207; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 211; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkCreationContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LinkCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkCreation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkCreationContext linkCreation() {
		LinkCreationContext _localctx = new LinkCreationContext(Context, State);
		EnterRule(_localctx, 40, RULE_linkCreation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(T__14);
			State = 214; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkDestructionContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LinkDestructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkDestruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkDestruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkDestructionContext linkDestruction() {
		LinkDestructionContext _localctx = new LinkDestructionContext(Context, State);
		EnterRule(_localctx, 42, RULE_linkDestruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(T__15);
			State = 217; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DissolutionContext : ParserRuleContext {
		public DissolutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dissolution; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDissolution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DissolutionContext dissolution() {
		DissolutionContext _localctx = new DissolutionContext(Context, State);
		EnterRule(_localctx, 44, RULE_dissolution);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivisionContext : ParserRuleContext {
		public NonEmptyMultisetContext nonEmptyMultiset() {
			return GetRuleContext<NonEmptyMultisetContext>(0);
		}
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public DivisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_division; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivisionContext division() {
		DivisionContext _localctx = new DivisionContext(Context, State);
		EnterRule(_localctx, 46, RULE_division);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__17);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier || _la==Multiplicity) {
				{
				State = 222; nonEmptyMultiset();
				}
			}

			State = 225; Match(T__18);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 226; typeReference();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public EmptyMultisetContext emptyMultiset() {
			return GetRuleContext<EmptyMultisetContext>(0);
		}
		public NonEmptyMultisetContext nonEmptyMultiset() {
			return GetRuleContext<NonEmptyMultisetContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(KpLinguaParser.Identifier, 0); }
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(Context, State);
		EnterRule(_localctx, 48, RULE_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 229; Match(Identifier);
				}
			}

			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 232; emptyMultiset();
				}
				break;
			case 2:
				{
				State = 233; Match(T__1);
				State = 234; nonEmptyMultiset();
				State = 235; Match(T__2);
				}
				break;
			}
			State = 239; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstantiationContext : ParserRuleContext {
		public InstanceContext[] instance() {
			return GetRuleContexts<InstanceContext>();
		}
		public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public InstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstantiationContext instantiation() {
		InstantiationContext _localctx = new InstantiationContext(Context, State);
		EnterRule(_localctx, 50, RULE_instantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; instance();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 242; Match(T__9);
				State = 243; instance();
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 249; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkContext : ParserRuleContext {
		public LinkOperandContext[] linkOperand() {
			return GetRuleContexts<LinkOperandContext>();
		}
		public LinkOperandContext linkOperand(int i) {
			return GetRuleContext<LinkOperandContext>(i);
		}
		public LinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkContext link() {
		LinkContext _localctx = new LinkContext(Context, State);
		EnterRule(_localctx, 52, RULE_link);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; linkOperand();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 252; Match(T__14);
				State = 253; linkOperand();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 );
			State = 258; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkOperandContext : ParserRuleContext {
		public InstanceContext instance() {
			return GetRuleContext<InstanceContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(KpLinguaParser.Identifier, 0); }
		public LinkWildcardOperandContext linkWildcardOperand() {
			return GetRuleContext<LinkWildcardOperandContext>(0);
		}
		public LinkOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkOperandContext linkOperand() {
		LinkOperandContext _localctx = new LinkOperandContext(Context, State);
		EnterRule(_localctx, 54, RULE_linkOperand);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; instance();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262; linkWildcardOperand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkWildcardOperandContext : ParserRuleContext {
		public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public LinkWildcardOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkWildcardOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpLinguaVisitor<TResult> typedVisitor = visitor as IKpLinguaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkWildcardOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkWildcardOperandContext linkWildcardOperand() {
		LinkWildcardOperandContext _localctx = new LinkWildcardOperandContext(Context, State);
		EnterRule(_localctx, 56, RULE_linkWildcardOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(T__19);
			State = 266; typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\x10F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\a', '\x2', '>', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x41', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'H', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'N', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', 
		'\x5', 'S', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'T', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '[', '\n', '\x6', 
		'\x3', '\a', '\x6', '\a', '^', '\n', '\a', '\r', '\a', '\xE', '\a', '_', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x65', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'h', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'o', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'r', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', 'y', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'|', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x83', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x8E', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x91', '\v', '\f', '\x3', '\f', '\x6', '\f', '\x94', '\n', '\f', '\r', 
		'\f', '\xE', '\f', '\x95', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x9B', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x9F', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xA4', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA7', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xAC', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xAF', '\v', '\xF', '\x3', '\x10', '\x5', '\x10', '\xB2', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xB9', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x5', '\x12', '\xBF', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\xC6', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xC9', 
		'\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xD4', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\xE2', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\xE6', '\n', '\x19', '\x3', '\x1A', '\x5', '\x1A', '\xE9', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\xF0', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\xF7', '\n', '\x1B', 
		'\f', '\x1B', '\xE', '\x1B', '\xFA', '\v', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x6', '\x1C', '\x101', 
		'\n', '\x1C', '\r', '\x1C', '\xE', '\x1C', '\x102', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x10A', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x2', '\x2', '\x1F', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'\x2', '\x2', '\x2', '\x115', '\x2', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'G', '\x3', '\x2', '\x2', '\x2', '\x6', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'R', '\x3', '\x2', '\x2', '\x2', '\n', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\f', ']', '\x3', '\x2', '\x2', '\x2', '\xE', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'k', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x14', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xBA', '\x3', '\x2', '\x2', '\x2', '\"', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xC2', '\x3', '\x2', '\x2', '\x2', '&', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xD3', '\x3', '\x2', '\x2', '\x2', '*', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xDA', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\x30', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xE8', '\x3', '\x2', '\x2', '\x2', '\x34', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x109', '\x3', '\x2', '\x2', '\x2', ':', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '<', '>', '\x5', '\x4', '\x3', '\x2', '=', '<', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x2', '\x2', '\x3', '\x43', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'H', '\x5', '\x6', '\x4', '\x2', '\x45', 'H', '\x5', '\x34', 
		'\x1B', '\x2', '\x46', 'H', '\x5', '\x36', '\x1C', '\x2', 'G', '\x44', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\x3', '\x2', '\x2', 'J', 'K', '\a', '\x17', '\x2', '\x2', 
		'K', 'M', '\a', '\x4', '\x2', '\x2', 'L', 'N', '\x5', '\b', '\x5', '\x2', 
		'M', 'L', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x5', '\x2', '\x2', 
		'P', '\a', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x5', '\n', '\x6', '\x2', 
		'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', '\t', '\x3', '\x2', '\x2', '\x2', 'V', '[', '\x5', '\f', '\a', '\x2', 
		'W', '[', '\x5', '\xE', '\b', '\x2', 'X', '[', '\x5', '\x10', '\t', '\x2', 
		'Y', '[', '\x5', '\x12', '\n', '\x2', 'Z', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\x5', '\x14', '\v', '\x2', ']', '\\', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x6', '\x2', '\x2', '\x62', 
		'\x66', '\a', '\x4', '\x2', '\x2', '\x63', '\x65', '\x5', '\x14', '\v', 
		'\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x5', '\x2', 
		'\x2', 'j', '\xF', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\a', '\x2', 
		'\x2', 'l', 'p', '\a', '\x4', '\x2', '\x2', 'm', 'o', '\x5', '\x14', '\v', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\a', '\x5', '\x2', '\x2', 't', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\b', '\x2', '\x2', 'v', 'z', '\a', '\x4', 
		'\x2', '\x2', 'w', 'y', '\x5', '\x14', '\v', '\x2', 'x', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '}', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x5', 
		'\x2', '\x2', '~', '\x13', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x5', '\x1A', '\xE', '\x2', '\x80', '\x81', '\a', '\t', '\x2', '\x2', 
		'\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '$', '\x13', '\x2', 
		'\x85', '\x86', '\a', '\n', '\x2', '\x2', '\x86', '\x87', '\x5', '\x16', 
		'\f', '\x2', '\x87', '\x88', '\a', '\v', '\x2', '\x2', '\x88', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x9B', '\x5', ' ', '\x11', '\x2', 
		'\x8A', '\x8F', '\x5', '\x18', '\r', '\x2', '\x8B', '\x8C', '\a', '\f', 
		'\x2', '\x2', '\x8C', '\x8E', '\x5', '\x18', '\r', '\x2', '\x8D', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', '\x30', '\x19', '\x2', 
		'\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9B', '\x5', '.', '\x18', '\x2', '\x98', '\x9B', '\x5', '*', 
		'\x16', '\x2', '\x99', '\x9B', '\x5', ',', '\x17', '\x2', '\x9A', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x93', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9F', '\x5', '$', '\x13', '\x2', '\x9D', '\x9F', '\x5', '(', 
		'\x15', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA5', '\x5', '\x1C', '\xF', '\x2', '\xA1', '\xA2', '\a', '\r', 
		'\x2', '\x2', '\xA2', '\xA4', '\x5', '\x1C', '\xF', '\x2', '\xA3', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xAD', '\x5', '\x1E', '\x10', '\x2', 
		'\xA9', '\xAA', '\a', '\xE', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\x1E', 
		'\x10', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', 
		'\a', '\x18', '\x2', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB9', '\x5', '$', '\x13', '\x2', '\xB4', '\xB5', 
		'\a', '\xF', '\x2', '\x2', '\xB5', '\xB6', '\x5', '\x1A', '\xE', '\x2', 
		'\xB6', '\xB7', '\a', '\x10', '\x2', '\x2', '\xB7', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\a', '\x4', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x5', 
		'\x2', '\x2', '\xBC', '!', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', 
		'\a', '\x19', '\x2', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\a', '\x17', '\x2', '\x2', '\xC1', '#', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC7', '\x5', '\"', '\x12', '\x2', 
		'\xC3', '\xC4', '\a', '\f', '\x2', '\x2', '\xC4', '\xC6', '\x5', '\"', 
		'\x12', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', 
		'\a', '\xF', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x17', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\x10', '\x2', '\x2', '\xCD', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xD4', '\x5', '\"', '\x12', '\x2', '\xCF', '\xD0', 
		'\a', '\x4', '\x2', '\x2', '\xD0', '\xD1', '\x5', '$', '\x13', '\x2', 
		'\xD1', '\xD2', '\a', '\x5', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x5', '&', '\x14', '\x2', '\xD6', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD8', '\a', '\x11', '\x2', '\x2', '\xD8', '\xD9', 
		'\x5', '&', '\x14', '\x2', '\xD9', '+', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDB', '\a', '\x12', '\x2', '\x2', '\xDB', '\xDC', '\x5', '&', '\x14', 
		'\x2', '\xDC', '-', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', 
		'\x13', '\x2', '\x2', '\xDE', '/', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE1', '\a', '\x14', '\x2', '\x2', '\xE0', '\xE2', '\x5', '$', '\x13', 
		'\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE5', '\a', '\x15', '\x2', '\x2', '\xE4', '\xE6', '\x5', '&', '\x14', 
		'\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\x31', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE9', '\a', '\x17', '\x2', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xF0', '\x5', ' ', '\x11', '\x2', '\xEB', 
		'\xEC', '\a', '\x4', '\x2', '\x2', '\xEC', '\xED', '\x5', '$', '\x13', 
		'\x2', '\xED', '\xEE', '\a', '\x5', '\x2', '\x2', '\xEE', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF2', '\x5', '&', '\x14', '\x2', '\xF2', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF8', '\x5', '\x32', '\x1A', '\x2', '\xF4', 
		'\xF5', '\a', '\f', '\x2', '\x2', '\xF5', '\xF7', '\x5', '\x32', '\x1A', 
		'\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'\v', '\x2', '\x2', '\xFC', '\x35', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\x100', '\x5', '\x38', '\x1D', '\x2', '\xFE', '\xFF', '\a', '\x11', '\x2', 
		'\x2', '\xFF', '\x101', '\x5', '\x38', '\x1D', '\x2', '\x100', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\a', '\v', '\x2', '\x2', '\x105', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x10A', '\x5', '\x32', '\x1A', '\x2', '\x107', '\x10A', 
		'\a', '\x17', '\x2', '\x2', '\x108', '\x10A', '\x5', ':', '\x1E', '\x2', 
		'\x109', '\x106', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '\x16', '\x2', 
		'\x2', '\x10C', '\x10D', '\x5', '&', '\x14', '\x2', '\x10D', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '?', 'G', 'M', 'T', 'Z', '_', '\x66', 'p', 
		'z', '\x82', '\x8F', '\x95', '\x9A', '\x9E', '\xA5', '\xAD', '\xB1', '\xB8', 
		'\xBE', '\xC7', '\xD3', '\xE1', '\xE5', '\xE8', '\xEF', '\xF8', '\x102', 
		'\x109',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
