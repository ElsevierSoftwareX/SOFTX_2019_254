//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KpExperiment.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class KpExperimentParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, Identifier=23, RelationalOperator=24, 
		NumericLiteral=25, Ws=26, Comment=27, LineComment=28;
	public const int
		RULE_kPExpriment = 0, RULE_ltlProperty = 1, RULE_ctlProperty = 2, RULE_ltlExpression = 3, 
		RULE_ctlExpression = 4, RULE_unaryExpression = 5, RULE_binaryExpression = 6, 
		RULE_notLtlExpression = 7, RULE_alwaysExpression = 8, RULE_eventuallyExpression = 9, 
		RULE_nextExpression = 10, RULE_neverExpression = 11, RULE_infinitelyOftenExpression = 12, 
		RULE_steadyStateExpression = 13, RULE_untilExpression = 14, RULE_weakUntilExpression = 15, 
		RULE_followedByExpression = 16, RULE_precededByExpression = 17, RULE_equivalenceExpression = 18, 
		RULE_implicationExpression = 19, RULE_orExpression = 20, RULE_andExpression = 21, 
		RULE_ltlExpressionOperand = 22, RULE_notExpression = 23, RULE_atomicExpression = 24, 
		RULE_objectMultiplicity = 25;
	public static readonly string[] ruleNames = {
		"kPExpriment", "ltlProperty", "ctlProperty", "ltlExpression", "ctlExpression", 
		"unaryExpression", "binaryExpression", "notLtlExpression", "alwaysExpression", 
		"eventuallyExpression", "nextExpression", "neverExpression", "infinitelyOftenExpression", 
		"steadyStateExpression", "untilExpression", "weakUntilExpression", "followedByExpression", 
		"precededByExpression", "equivalenceExpression", "implicationExpression", 
		"orExpression", "andExpression", "ltlExpressionOperand", "notExpression", 
		"atomicExpression", "objectMultiplicity"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ltl'", "':'", "';'", "'ctl'", "'not'", "'always'", "'eventually'", 
		"'next'", "'never'", "'infinitely-often'", "'steady-state'", "'until'", 
		"'weak-until'", "'followed-by'", "'preceded-by'", "'equivalent'", "'implies'", 
		"'or'", "'and'", "'('", "')'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "Identifier", 
		"RelationalOperator", "NumericLiteral", "Ws", "Comment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KpExperiment.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KpExperimentParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	        protected const int EOF = Eof;

		public KpExperimentParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KpExperimentParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class KPExprimentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KpExperimentParser.Eof, 0); }
		public LtlPropertyContext[] ltlProperty() {
			return GetRuleContexts<LtlPropertyContext>();
		}
		public LtlPropertyContext ltlProperty(int i) {
			return GetRuleContext<LtlPropertyContext>(i);
		}
		public CtlPropertyContext[] ctlProperty() {
			return GetRuleContexts<CtlPropertyContext>();
		}
		public CtlPropertyContext ctlProperty(int i) {
			return GetRuleContext<CtlPropertyContext>(i);
		}
		public KPExprimentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kPExpriment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKPExpriment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KPExprimentContext kPExpriment() {
		KPExprimentContext _localctx = new KPExprimentContext(Context, State);
		EnterRule(_localctx, 0, RULE_kPExpriment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 52; ltlProperty();
					}
					break;
				case T__3:
					{
					State = 53; ctlProperty();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__3 );
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LtlPropertyContext : ParserRuleContext {
		public LtlExpressionContext ltlExpression() {
			return GetRuleContext<LtlExpressionContext>(0);
		}
		public LtlPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ltlProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtlProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LtlPropertyContext ltlProperty() {
		LtlPropertyContext _localctx = new LtlPropertyContext(Context, State);
		EnterRule(_localctx, 2, RULE_ltlProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(T__0);
			State = 61; Match(T__1);
			State = 62; ltlExpression();
			State = 63; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtlPropertyContext : ParserRuleContext {
		public CtlExpressionContext ctlExpression() {
			return GetRuleContext<CtlExpressionContext>(0);
		}
		public CtlPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctlProperty; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtlProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtlPropertyContext ctlProperty() {
		CtlPropertyContext _localctx = new CtlPropertyContext(Context, State);
		EnterRule(_localctx, 4, RULE_ctlProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__3);
			State = 66; Match(T__1);
			State = 67; ctlExpression();
			State = 68; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LtlExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public LtlExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ltlExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtlExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LtlExpressionContext ltlExpression() {
		LtlExpressionContext _localctx = new LtlExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_ltlExpression);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; binaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtlExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public CtlExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctlExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtlExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtlExpressionContext ctlExpression() {
		CtlExpressionContext _localctx = new CtlExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_ctlExpression);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; binaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public NotLtlExpressionContext notLtlExpression() {
			return GetRuleContext<NotLtlExpressionContext>(0);
		}
		public EventuallyExpressionContext eventuallyExpression() {
			return GetRuleContext<EventuallyExpressionContext>(0);
		}
		public AlwaysExpressionContext alwaysExpression() {
			return GetRuleContext<AlwaysExpressionContext>(0);
		}
		public NextExpressionContext nextExpression() {
			return GetRuleContext<NextExpressionContext>(0);
		}
		public NeverExpressionContext neverExpression() {
			return GetRuleContext<NeverExpressionContext>(0);
		}
		public InfinitelyOftenExpressionContext infinitelyOftenExpression() {
			return GetRuleContext<InfinitelyOftenExpressionContext>(0);
		}
		public SteadyStateExpressionContext steadyStateExpression() {
			return GetRuleContext<SteadyStateExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_unaryExpression);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; notLtlExpression();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; eventuallyExpression();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80; alwaysExpression();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 81; nextExpression();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 82; neverExpression();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 83; infinitelyOftenExpression();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 7);
				{
				State = 84; steadyStateExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		public UntilExpressionContext untilExpression() {
			return GetRuleContext<UntilExpressionContext>(0);
		}
		public WeakUntilExpressionContext weakUntilExpression() {
			return GetRuleContext<WeakUntilExpressionContext>(0);
		}
		public FollowedByExpressionContext followedByExpression() {
			return GetRuleContext<FollowedByExpressionContext>(0);
		}
		public PrecededByExpressionContext precededByExpression() {
			return GetRuleContext<PrecededByExpressionContext>(0);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_binaryExpression);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; untilExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; weakUntilExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; followedByExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; precededByExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotLtlExpressionContext : ParserRuleContext {
		public LtlExpressionContext ltlExpression() {
			return GetRuleContext<LtlExpressionContext>(0);
		}
		public NotLtlExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notLtlExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotLtlExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotLtlExpressionContext notLtlExpression() {
		NotLtlExpressionContext _localctx = new NotLtlExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_notLtlExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__4);
			State = 94; ltlExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlwaysExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public AlwaysExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alwaysExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlwaysExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlwaysExpressionContext alwaysExpression() {
		AlwaysExpressionContext _localctx = new AlwaysExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_alwaysExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(T__5);
			State = 97; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventuallyExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public EventuallyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventuallyExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventuallyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventuallyExpressionContext eventuallyExpression() {
		EventuallyExpressionContext _localctx = new EventuallyExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_eventuallyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(T__6);
			State = 100; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public NextExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nextExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNextExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NextExpressionContext nextExpression() {
		NextExpressionContext _localctx = new NextExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_nextExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__7);
			State = 103; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeverExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public NeverExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neverExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeverExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeverExpressionContext neverExpression() {
		NeverExpressionContext _localctx = new NeverExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_neverExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(T__8);
			State = 106; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfinitelyOftenExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public InfinitelyOftenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infinitelyOftenExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfinitelyOftenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfinitelyOftenExpressionContext infinitelyOftenExpression() {
		InfinitelyOftenExpressionContext _localctx = new InfinitelyOftenExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_infinitelyOftenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__9);
			State = 109; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SteadyStateExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public SteadyStateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_steadyStateExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSteadyStateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SteadyStateExpressionContext steadyStateExpression() {
		SteadyStateExpressionContext _localctx = new SteadyStateExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_steadyStateExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(T__10);
			State = 112; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public UntilExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntilExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilExpressionContext untilExpression() {
		UntilExpressionContext _localctx = new UntilExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_untilExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; equivalenceExpression();
			State = 115; Match(T__11);
			State = 116; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeakUntilExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public WeakUntilExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weakUntilExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeakUntilExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeakUntilExpressionContext weakUntilExpression() {
		WeakUntilExpressionContext _localctx = new WeakUntilExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_weakUntilExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; equivalenceExpression();
			State = 119; Match(T__12);
			State = 120; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FollowedByExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public FollowedByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_followedByExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFollowedByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FollowedByExpressionContext followedByExpression() {
		FollowedByExpressionContext _localctx = new FollowedByExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_followedByExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; equivalenceExpression();
			State = 123; Match(T__13);
			State = 124; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecededByExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext[] equivalenceExpression() {
			return GetRuleContexts<EquivalenceExpressionContext>();
		}
		public EquivalenceExpressionContext equivalenceExpression(int i) {
			return GetRuleContext<EquivalenceExpressionContext>(i);
		}
		public PrecededByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precededByExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecededByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecededByExpressionContext precededByExpression() {
		PrecededByExpressionContext _localctx = new PrecededByExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_precededByExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; equivalenceExpression();
			State = 127; Match(T__14);
			State = 128; equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceExpressionContext : ParserRuleContext {
		public ImplicationExpressionContext[] implicationExpression() {
			return GetRuleContexts<ImplicationExpressionContext>();
		}
		public ImplicationExpressionContext implicationExpression(int i) {
			return GetRuleContext<ImplicationExpressionContext>(i);
		}
		public EquivalenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceExpressionContext equivalenceExpression() {
		EquivalenceExpressionContext _localctx = new EquivalenceExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_equivalenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; implicationExpression();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 131; Match(T__15);
				State = 132; implicationExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicationExpressionContext : ParserRuleContext {
		public OrExpressionContext[] orExpression() {
			return GetRuleContexts<OrExpressionContext>();
		}
		public OrExpressionContext orExpression(int i) {
			return GetRuleContext<OrExpressionContext>(i);
		}
		public ImplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicationExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicationExpressionContext implicationExpression() {
		ImplicationExpressionContext _localctx = new ImplicationExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_implicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; orExpression();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 136; Match(T__16);
				State = 137; orExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; andExpression();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 141; Match(T__17);
				State = 142; andExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public LtlExpressionOperandContext[] ltlExpressionOperand() {
			return GetRuleContexts<LtlExpressionOperandContext>();
		}
		public LtlExpressionOperandContext ltlExpressionOperand(int i) {
			return GetRuleContext<LtlExpressionOperandContext>(i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; ltlExpressionOperand();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 146; Match(T__18);
				State = 147; ltlExpressionOperand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LtlExpressionOperandContext : ParserRuleContext {
		public LtlExpressionContext ltlExpression() {
			return GetRuleContext<LtlExpressionContext>(0);
		}
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public AtomicExpressionContext atomicExpression() {
			return GetRuleContext<AtomicExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public LtlExpressionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ltlExpressionOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtlExpressionOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LtlExpressionOperandContext ltlExpressionOperand() {
		LtlExpressionOperandContext _localctx = new LtlExpressionOperandContext(Context, State);
		EnterRule(_localctx, 44, RULE_ltlExpressionOperand);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; Match(T__19);
				State = 151; ltlExpression();
				State = 152; Match(T__20);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; Match(T__19);
				State = 155; equivalenceExpression();
				State = 156; Match(T__20);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158; atomicExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 159; notExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__4);
			State = 163; Match(T__19);
			State = 164; equivalenceExpression();
			State = 165; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicExpressionContext : ParserRuleContext {
		public ObjectMultiplicityContext[] objectMultiplicity() {
			return GetRuleContexts<ObjectMultiplicityContext>();
		}
		public ObjectMultiplicityContext objectMultiplicity(int i) {
			return GetRuleContext<ObjectMultiplicityContext>(i);
		}
		public ITerminalNode RelationalOperator() { return GetToken(KpExperimentParser.RelationalOperator, 0); }
		public ITerminalNode NumericLiteral() { return GetToken(KpExperimentParser.NumericLiteral, 0); }
		public AtomicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicExpressionContext atomicExpression() {
		AtomicExpressionContext _localctx = new AtomicExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_atomicExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; objectMultiplicity();
			State = 168; Match(RelationalOperator);
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 169; objectMultiplicity();
				}
				break;
			case NumericLiteral:
				{
				State = 170; Match(NumericLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectMultiplicityContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(KpExperimentParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(KpExperimentParser.Identifier, i);
		}
		public ObjectMultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectMultiplicity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKpExperimentVisitor<TResult> typedVisitor = visitor as IKpExperimentVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectMultiplicityContext objectMultiplicity() {
		ObjectMultiplicityContext _localctx = new ObjectMultiplicityContext(Context, State);
		EnterRule(_localctx, 50, RULE_objectMultiplicity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(Identifier);
			State = 174; Match(T__21);
			State = 175; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xB4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x39', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', ':', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'K', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', 'X', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '^', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x88', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x8D', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x92', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x97', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\xA3', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\xAE', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x2', '\x1C', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x2', '\x2', '\x2', '\xAE', '\x2', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '>', '\x3', '\x2', '\x2', '\x2', '\x6', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'J', '\x3', '\x2', '\x2', '\x2', '\n', 
		'N', '\x3', '\x2', '\x2', '\x2', '\f', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\xE', ']', '\x3', '\x2', '\x2', '\x2', '\x10', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x62', '\x3', '\x2', '\x2', '\x2', '\x14', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'h', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x1A', 'n', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', 'q', '\x3', '\x2', '\x2', '\x2', '\x1E', 't', '\x3', '\x2', '\x2', 
		'\x2', ' ', 'x', '\x3', '\x2', '\x2', '\x2', '\"', '|', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x80', '\x3', '\x2', '\x2', '\x2', '&', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x89', '\x3', '\x2', '\x2', '\x2', '*', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x93', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\x30', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x34', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x39', '\x5', '\x4', '\x3', '\x2', '\x37', 
		'\x39', '\x5', '\x6', '\x4', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', '\x2', '\x2', '\x3', '=', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '\x3', '\x2', '\x2', '?', '@', '\a', '\x4', '\x2', '\x2', 
		'@', '\x41', '\x5', '\b', '\x5', '\x2', '\x41', '\x42', '\a', '\x5', '\x2', 
		'\x2', '\x42', '\x5', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\x6', '\x2', '\x2', '\x44', '\x45', '\a', '\x4', '\x2', '\x2', '\x45', 
		'\x46', '\x5', '\n', '\x6', '\x2', '\x46', 'G', '\a', '\x5', '\x2', '\x2', 
		'G', '\a', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x5', '\f', '\a', '\x2', 
		'I', 'K', '\x5', '\xE', '\b', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'O', '\x5', '\f', '\a', '\x2', 'M', 'O', '\x5', '\xE', '\b', 
		'\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', '\v', '\x3', '\x2', '\x2', '\x2', 'P', 'X', '\x5', '\x10', 
		'\t', '\x2', 'Q', 'X', '\x5', '\x14', '\v', '\x2', 'R', 'X', '\x5', '\x12', 
		'\n', '\x2', 'S', 'X', '\x5', '\x16', '\f', '\x2', 'T', 'X', '\x5', '\x18', 
		'\r', '\x2', 'U', 'X', '\x5', '\x1A', '\xE', '\x2', 'V', 'X', '\x5', '\x1C', 
		'\xF', '\x2', 'W', 'P', '\x3', '\x2', '\x2', '\x2', 'W', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'R', '\x3', '\x2', '\x2', '\x2', 'W', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '^', '\x5', '\x1E', '\x10', '\x2', 'Z', '^', 
		'\x5', ' ', '\x11', '\x2', '[', '^', '\x5', '\"', '\x12', '\x2', '\\', 
		'^', '\x5', '$', '\x13', '\x2', ']', 'Y', '\x3', '\x2', '\x2', '\x2', 
		']', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', 
		']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '_', '`', '\a', '\a', '\x2', '\x2', '`', '\x61', '\x5', '\b', '\x5', 
		'\x2', '\x61', '\x11', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\b', '\x2', '\x2', '\x63', '\x64', '\x5', '&', '\x14', '\x2', '\x64', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\t', '\x2', 
		'\x2', '\x66', 'g', '\x5', '&', '\x14', '\x2', 'g', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\a', '\n', '\x2', '\x2', 'i', 'j', '\x5', '&', 
		'\x14', '\x2', 'j', '\x17', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', 
		'\v', '\x2', '\x2', 'l', 'm', '\x5', '&', '\x14', '\x2', 'm', '\x19', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\f', '\x2', '\x2', 'o', 'p', 
		'\x5', '&', '\x14', '\x2', 'p', '\x1B', '\x3', '\x2', '\x2', '\x2', 'q', 
		'r', '\a', '\r', '\x2', '\x2', 'r', 's', '\x5', '&', '\x14', '\x2', 's', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x5', '&', '\x14', '\x2', 
		'u', 'v', '\a', '\xE', '\x2', '\x2', 'v', 'w', '\x5', '&', '\x14', '\x2', 
		'w', '\x1F', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x5', '&', '\x14', 
		'\x2', 'y', 'z', '\a', '\xF', '\x2', '\x2', 'z', '{', '\x5', '&', '\x14', 
		'\x2', '{', '!', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x5', '&', '\x14', 
		'\x2', '}', '~', '\a', '\x10', '\x2', '\x2', '~', '\x7F', '\x5', '&', 
		'\x14', '\x2', '\x7F', '#', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x5', '&', '\x14', '\x2', '\x81', '\x82', '\a', '\x11', '\x2', '\x2', 
		'\x82', '\x83', '\x5', '&', '\x14', '\x2', '\x83', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x87', '\x5', '(', '\x15', '\x2', '\x85', '\x86', 
		'\a', '\x12', '\x2', '\x2', '\x86', '\x88', '\x5', '(', '\x15', '\x2', 
		'\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\'', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', 
		'\x5', '*', '\x16', '\x2', '\x8A', '\x8B', '\a', '\x13', '\x2', '\x2', 
		'\x8B', '\x8D', '\x5', '*', '\x16', '\x2', '\x8C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x5', ',', '\x17', '\x2', 
		'\x8F', '\x90', '\a', '\x14', '\x2', '\x2', '\x90', '\x92', '\x5', ',', 
		'\x17', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '+', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x96', '\x5', '.', '\x18', '\x2', '\x94', '\x95', '\a', '\x15', '\x2', 
		'\x2', '\x95', '\x97', '\x5', '.', '\x18', '\x2', '\x96', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x16', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\b', '\x5', '\x2', '\x9A', '\x9B', '\a', 
		'\x17', '\x2', '\x2', '\x9B', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\a', '\x16', '\x2', '\x2', '\x9D', '\x9E', '\x5', '&', '\x14', 
		'\x2', '\x9E', '\x9F', '\a', '\x17', '\x2', '\x2', '\x9F', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA3', '\x5', '\x32', '\x1A', '\x2', '\xA1', 
		'\xA3', '\x5', '\x30', '\x19', '\x2', '\xA2', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\a', '\x2', '\x2', 
		'\xA5', '\xA6', '\a', '\x16', '\x2', '\x2', '\xA6', '\xA7', '\x5', '&', 
		'\x14', '\x2', '\xA7', '\xA8', '\a', '\x17', '\x2', '\x2', '\xA8', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\x34', '\x1B', '\x2', 
		'\xAA', '\xAD', '\a', '\x1A', '\x2', '\x2', '\xAB', '\xAE', '\x5', '\x34', 
		'\x1B', '\x2', '\xAC', '\xAE', '\a', '\x1B', '\x2', '\x2', '\xAD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x33', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x19', 
		'\x2', '\x2', '\xB0', '\xB1', '\a', '\x18', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', '\x19', '\x2', '\x2', '\xB2', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x38', ':', 'J', 'N', 'W', ']', '\x87', '\x8C', '\x91', '\x96', 
		'\xA2', '\xAD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
